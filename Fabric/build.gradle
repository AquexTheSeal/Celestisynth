import net.darkhax.curseforgegradle.TaskPublishCurseForge
import com.modrinth.minotaur.TaskModrinthUpload

import java.util.stream.Collectors

buildscript {
    repositories {
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
        maven { url "https://maven.shedaniel.me/" }
        maven { url 'https://api.modrinth.com/maven' }
        maven { url 'https://maven.kosmx.dev/' }
        mavenCentral()
    }
}

plugins {
    id 'fabric-loom' version '0.12-SNAPSHOT'
    id 'maven-publish'
    id 'idea'
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id "net.darkhax.curseforgegradle" version "1.0.11"
    id "com.modrinth.minotaur" version "2.+"
}

tasks.build.dependsOn(tasks.findByName("shadowJar"))

configurations {
    shadow
    implementation.extendsFrom(shadow)
}
shadowJar {
    configurations = [project.configurations.shadow]
}

archivesBaseName = "${mod_name}-fabric-${minecraft_version}"

repositories {
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    maven {
        name = 'Forge'
        url = 'https://maven.minecraftforge.net'
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "JitPack"
        url = "https://jitpack.io"
    }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        //parchment("org.parchmentmc.data:parchment-1.19.2:${parchment_version}@zip")
    }

    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    implementation project(":Common")
    modApi "me.shedaniel.cloth:cloth-config-fabric:10.0.96"
    //modImplementation("me.shedaniel.cloth:cloth-config-fabric:8.2.88")
    modImplementation("software.bernie.geckolib:geckolib-fabric-1.19.4:${geckolib_fabric_version}")
    modImplementation("dev.kosmx.player-anim:player-animation-lib-fabric:${player_anim_version}")
    modImplementation("maven.modrinth:better-combat:${better_combat_version}-fabric")
}
reg.configureJarTask(shadowJar)

loom {
    accessWidenerPath = project(":Common").file("src/main/resources/celestisynth.aw")
    runs {
        def args = []

        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
            vmArgs(args)
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
            vmArgs(args)
        }
    }
}

processResources {
//    from project(":Common").sourceSets.main.resources
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }

    filesMatching("${mod_id}.mixins.json") {
        expand "refmap_target": "${archivesBaseName}-"
    }
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}
tasks.withType(Javadoc) {
    failOnError false
}

jar {
    from("LICENSE") {
        rename { "${it}_${mod_name}" }
    }
}
// Disable to build with gradle //TODO: Fix gradle + building w/ intellij
sourceSets {
    main {
        java {
//            srcDir 'src/main/java'
            srcDirs project(':Common').sourceSets.main.java.srcDirs
        }
        resources {
//            srcDir 'src/main/resources'
            srcDirs project(':Common').sourceSets.main.resources.srcDirs
        }
    }
}

remapJar {
    input.set shadowJar.archiveFile
}

task fabric_checkForRefmap() {
    doLast {
        File file1 = remapJar.archiveFile.get().asFile
        logger.info("Verifying refmap exists...")
        if (file1.exists()) {
            FileTree files = zipTree(file1)
            Set<String> fileNames = files.getFiles().stream().map(file -> file.getName()).collect(Collectors.toSet())

            String refmap = "${archivesBaseName}-refmap.json"
            if (!fileNames.contains(refmap)) {
                throw new IllegalStateException("Refmap is missing.")
            }
        } else {
            throw new IllegalStateException("File is missing.")
        }
        logger.info("Refmap found!")
    }
}

task fabric_publishCurseForge(type: TaskPublishCurseForge) {
    apiToken = "$System.env.CURSEFORGE_KEY"
    int projectId = Integer.parseInt("${project.fabric_curseforge_id}")
    String changelogText = projectDir.toPath().getParent().resolve("CHANGELOG.md").getText('UTF-8')

    def mainFile = upload(projectId, remapJar)
    mainFile.changelog = changelogText
    mainFile.changelogType = "markdown"
    mainFile.releaseType = "${project.release_type}"
    mainFile.addGameVersion("${project.minecraft_version}")
    mainFile.addModLoader("fabric")
}


// Make sure it runs after build!
task fabric_publishModrinth (type: TaskModrinthUpload){
    String changelogText = projectDir.toPath().getParent().resolve("CHANGELOG.md").getText('UTF-8')
    modrinth {
        token = "$System.env.MODRINTH_KEY"
        projectId = "${project.modrinth_id}"
        versionName = "${archivesBaseName}-${project.version}"
        versionNumber = "${project.minecraft_version}-${project.version}-fabric"
        versionType = "${project.release_type}"
        uploadFile = remapJar
        changelog = changelogText
        gameVersions = ["${project.minecraft_version}"]
        loaders = ['fabric']
    }
}


task fabric_buildAndReleaseCurseforge {}
tasks.fabric_checkForRefmap.mustRunAfter tasks.build
tasks.fabric_publishCurseForge.mustRunAfter tasks.fabric_checkForRefmap
tasks.fabric_buildAndReleaseCurseforge.dependsOn(tasks.build, tasks.fabric_checkForRefmap, tasks.fabric_publishCurseForge)

task fabric_buildAndReleaseModrinth {}
tasks.fabric_checkForRefmap.mustRunAfter tasks.build
tasks.fabric_publishModrinth.mustRunAfter tasks.fabric_checkForRefmap
tasks.fabric_buildAndReleaseModrinth.dependsOn(tasks.build, tasks.fabric_checkForRefmap, tasks.fabric_publishModrinth)

task fabric_buildAndReleaseModrinthAndCurseforge {}
tasks.fabric_checkForRefmap.mustRunAfter tasks.build
tasks.fabric_publishCurseForge.mustRunAfter tasks.fabric_checkForRefmap
tasks.fabric_publishModrinth.mustRunAfter tasks.fabric_publishCurseForge
tasks.fabric_buildAndReleaseModrinthAndCurseforge.dependsOn(tasks.build, tasks.fabric_checkForRefmap, tasks.fabric_publishCurseForge, tasks.fabric_publishModrinth)